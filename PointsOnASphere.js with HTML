<!DOCTYPE html>
<html lang = "en">
<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content = "width=device-width, initial-scale=1.0">
    <title>testingg w Three.js yo</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>

<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src = "https://cdn.jsdelivr.net/npm/three@0.128/examples/js/controls/OrbitControls.js"></script>

<script>

//fibonacci sphere function
function fibonacciSphere(N, radius = 1)
{
    const points = [];
    const goldenAngle = Math.PI * (3 - Math.sqrt(5));  //approx. 2.39996323

    for (let i = 0; i < N; i++)
    {
        const z = 1 - (2 * i) / (N - 1);
        const radius_proj = Math.sqrt(1 - z * z);
        const phi = i * goldenAngle; 

        const x = radius_proj * Math.cos(phi) * radius;
        const y = radius_proj * Math.sin(phi) * radius;
        const point = new THREE.Vector3(x, y, z * radius);
        points.push(point);

        // console.log(`Point ${i}: x=${x}, y=${y}, z=${z * radius}`);
    }

    return points;
}

//scene
let scene, camera, renderer, controls;

function init()
{
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 10;

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; 
    controls.dampingFactor = 0.05;
    controls.minDistance = 5;
    controls.maxDistance = 20;

    //points
    const pointCount = 200;
    const radius = 5;
    const points = fibonacciSphere(pointCount, radius);

    const material = new THREE.PointsMaterial({ color: 0x800080, size: 0.1 }); //ourple

    const geometry = new THREE.BufferGeometry().setFromPoints(points);

    const pointMesh = new THREE.Points(geometry, material);
    scene.add(pointMesh);

    function animate()
    {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);

        // console.log(`Camera position: ${camera.position.x}, ${camera.position.y}, ${camera.position.z}`);
        // console.log(`Number of points in scene: ${scene.children.length}`);
    }

    animate();
}

window.addEventListener('resize', function()
{
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    // console.log(`Window resized: ${window.innerWidth}x${window.innerHeight}`);
}
);

init();

</script>

</body>
</html>
